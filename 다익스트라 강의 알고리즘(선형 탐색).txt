#include<iostream>
using namespace std;

int number = 6;
int INF = 1000000000;	// 무한을 나타내는 수

// 전체 그래프를 초기화. 비용으로 초기화
int a[6][6] = {
	{0, 2, 5, 1, INF, INF},
	{2, 0, 3, 2, INF, INF},
	{5, 3, 0, 3, 1, 5},
	{1, 2, 3, 0, 1, INF},
	{INF, INF, 1, 1, 0, 2},
	{INF, INF, 5, INF, 2, 0}
};

// 방문되었는지를 확인하기 위한 bool형의 배열
bool v[6];
// 거리 저장을 위한 배열
int d[6];

// 가장 최소 거리를 가지는 노드를 반환하는 함수
int getSmallIndex() {
	int min = INF;
	int index = 0;
	for (int i = 0; i < number; i++) {
		if (d[i] < min && !v[i]) {	// 거리가 저장되어있는 배열을 앞에서부터 탐색하여(선형탐색) 아직 방문처리가 되어 있지 않은 노드들 중에서 최소거리의 노드를 반환한다.
			min = d[i];
			index = i; 
		}
	}
	return index;
}

// 다익스트라를 수행하는 함수
// start: 시작할 위치
void dijkstra(int start) {
	for (int i = 0; i < number; i++) {
		d[i] = a[start][i];		// 시작점에서 출발했을때 연결되어 있는 노드들의 비용을 모두 담음
	}
	v[start] = true;
	for (int i = 0; i < number - 2; i++) {	// 첫번째 노드는 이미 방문, 마지막 노드는 방문하지 않아도 최단 거리가 갱신됨. 따라서 number - 2만큼 반복
		int current = getSmallIndex();	// 방문하지 않은 노드 중에서 최소 비용을 가지는 노드를 가져옴
		v[current] = true;	// 그 노드를 방문처리
		for (int j = 0; j < 6; j++) {	// 그 노드의 인접한 노드들을 모두 탐색해보면서
			if (!v[j]) {	//현재 그 노드를 방문하지 않았다면
				if (d[current] + a[current][j] < d[j]) {	// 그리고 그 노드를 거쳐서 가는 것이 더 짧다면, 최단거리를 갱신한다.
					d[j] = d[current] + a[current][j]; 
				}
			}
		}
	}
}

int main() {
	dijkstra(0);
	for (int i = 0; i < number; i++) {
		cout << d[i] << " ";
	}
	cout << "\n";
	return 0;
}