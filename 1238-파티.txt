#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;

int x;
int INF = 1000000000;
vector<pair<int, int> >city[1010];
int d[1010];
int time[1010];
void dijkstra(int start, int n);

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);

	// 도시의 개수와 도로의 개수, 그리고 시작 지점을 입력받음
	int n, m;
	cin >> n >> m >> x;

	// 도로 정보를 입력 받음
	int a, b, c;
	for (int i = 1; i <= m; i++) {
		cin >> a >> b >> c;
		city[a].push_back(make_pair(c, b));
	}

	// 자신의 집에서 x로 가는 최소시간이 필요
	for (int i = 1; i <= n; i++) {
		if (i != x) {
			dijkstra(i, n);
		}
	}

	// 해당 도로에 대해 다익스트라 알고리즘 수행 -> 이거는 x에서 다시 자신의 집으로 돌아가는 것
	dijkstra(x, n);
	cout << *max_element(time, time + n + 1) << "\n";
	return 0;
}

void dijkstra(int start, int n) {
	// d배열 다시 한번 초기화
	for (int i = 1; i <= n; i++) {
		d[i] = INF;
	}

	d[start] = 0;
	priority_queue<pair<int, int> >pq;
	pq.push(make_pair(0, start));

	while (!pq.empty()) {
		int current = pq.top().second;
		int distance = -pq.top().first;
		pq.pop();
		if (d[current] < distance) {
			continue;
		}
		for (int i = 0; i < city[current].size(); i++) {
			int next = city[current][i].second;
			int nextDistance = city[current][i].first + distance;
			if (nextDistance < d[next]) {
				d[next] = nextDistance;
				pq.push(make_pair(-nextDistance, next));
			}
		}
	}
	if (start != x) {
		time[start] += d[x];
	}
	else {
		for (int i = 1; i <= n; i++) {
			if (i != start) {
				time[i] += d[i];
			}
		}
	}
}