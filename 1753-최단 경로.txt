#include<iostream>
#include<vector>
#include<queue>
using namespace std;

vector<pair<int, int> >a[20010];
int d[20010];
int INF = 1000000000;

void dijkstra(int start) {
	d[start] = 0;
	priority_queue<pair<int, int> > pq;
	pq.push(make_pair(0, start));

	while (!pq.empty()) {
		int current = pq.top().second;
		int distance = -pq.top().first;
		pq.pop();
		if (d[current] < distance) {
			continue;
		}
		for (int i = 0; i < a[current].size(); i++) {
			int next = a[current][i].second;
			int nextDistance = a[current][i].first + distance;
			if (nextDistance < d[next]) {
				d[next] = nextDistance;
				pq.push(make_pair(-nextDistance, next));
			}
		}
	}
}

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);

	int n, e, start, u, v, w;
	cin >> n >> e >> start;
	for (int i = 1; i <= n; i++) {
		d[i] = INF;
	}
	for (int i = 0; i < e; i++) {
		cin >> u >> v >> w;
		a[u].push_back(make_pair(w, v));
	}
	dijkstra(start);
	for (int i = 1; i <= n; i++) {
		if (d[i] == INF) {
			cout << "INF\n";
		}
		else{
			cout << d[i] << "\n";
		}
	}
	return 0;
}